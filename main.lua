
local EmojiCrypt = {}

local Encode = {}
local Decode = {}

local Emojis = {     
    0x1F600, 0x1F603, 0x1F604, 0x1F601, 0x1F606, 0x1F605, 0x1F923, 0x1F602, 
    0x1F642, 0x1F643, 0x1F609, 0x1F60A, 0x1F607, 0x1F970, 0x1F60D, 0x1F929, 
    0x1F618, 0x1F617, 0x1F510, 0x1F61A, 0x1F619, 0x1F60B, 0x1F61B, 0x1F61C, 
    0x1F92A, 0x1F61D, 0x1F911, 0x1F917, 0x1F92D, 0x1F92B, 0x1F914, 0x1F910, 
    0x1F928, 0x1F610, 0x1F611, 0x1F636, 0x1F60F, 0x1F612, 0x1F644, 0x1F62C, 
    0x1F62E, 0x1F925, 0x1F60C, 0x1F614, 0x1F62A, 0x1F924, 0x1F634, 0x1F637, 
    0x1F912, 0x1F915, 0x1F922, 0x1F92E, 0x1F927, 0x1F975, 0x1F976, 0x1F974, 
    0x1F635, 0x1F92F, 0x1F920, 0x1F973, 0x1F60E, 0x1F913, 0x1F9D0, 0x1F615, 
    0x1F61F, 0x1F641, 0x1F41B, 0x1F62E, 0x1F62F, 0x1F632, 0x1F633, 0x1F97A, 
    0x1F626, 0x1F627, 0x1F628, 0x1F630, 0x1F625, 0x1F622, 0x1F62D, 0x1F631, 
    0x1F616, 0x1F623, 0x1F61E, 0x1F613, 0x1F629, 0x1F62B, 0x1F971, 0x1F624, 
    0x1F621, 0x1F620, 0x1F92C, 0x1F608, 0x1F47F, 0x1F480, 0x1F44F, 0x1F4A9, 
    0x1F921, 0x1F479, 0x1F47A, 0x1F47B, 0x1F47D, 0x1F47E, 0x1F916, 0x1F63A, 
    0x1F638, 0x1F639, 0x1F63B, 0x1F63C, 0x1F63D, 0x1F640, 0x1F63F, 0x1F63E, 
    0x1F44B, 0x1F91A, 0x1F590, 0x1F513, 0x1F596, 0x1F44C, 0x1F44D, 0x1F44E, 
    0x1F64F, 0x1F440, 0x1F5E3, 0x1F431, 0x1F68E, 0x1F525, 0x1F5DD, 0x1F511
}

for Byte = 0, 255 do
    local Emoji = utf8.char(Emojis[Byte % 128 + 1]) .. (Byte > 127 and utf8.char(0x1F512) or "")

    Decode[Emoji] = Byte
    Encode[Byte] = Emoji
end

function EmojiCrypt.Encrypt(Normal, Key)
    local Encrypted = {}

    local Normal = {string.byte(Normal, 1, -1)}
    local Key = {string.byte(Key, 1, -1)}

    for Index = 1, #Normal do
        table.insert(Encrypted, Encode[bit32.bxor(Normal[Index], Key[Index % #Key + 1])])
    end

    return table.concat(Encrypted)
end

function EmojiCrypt.Decrypt(Encrypted, Key)
    local Decoded = {}
    local Decrypted = {}

    for i = 1, #Encrypted, 4 do
        local Current = string.sub(Encrypted, i, i + 3)
        local Next = string.sub(Encrypted, i + 4, i + 7)

        if Current ~= utf8.char(0x1F512) then
            table.insert(Decoded, Decode[Current] + (Next == utf8.char(0x1F512) and 128 or 0))
        end
    end

    local Key = {string.byte(Key, 1, -1)}
    
    for Index = 1, #Decoded do
        table.insert(Decrypted, string.char(bit32.bxor(Decoded[Index], Key[Index % #Key + 1])))
    end

    return table.concat(Decrypted)
end

return EmojiCrypt
